name: Deploy to Amazon EC2

on:
  push:
    branches:
      - develop

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: younseoandchildren
  CODE_DEPLOY_APPLICATION_NAME: bbbb-younseoandchildren
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: bbbb-younseoandchildren-group
  RESOURCE_PATH: ./src/main/resources/application.yml

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # (1) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # (2) JDK 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # (2.5) env 설정
      - name: Set yaml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ${{env.RESOURCE_PATH}}
        env:
          jwt.secret.key: ${{ secrets.JWT_SECRET_KEY }}
          spring.datasource.url: ${{ secrets.DATA_URL }}
          spring.datasource.username: ${{ secrets.DATA_USERNAME }}
          spring.datasource.password: ${{ secrets.DATA_PASSWORD }}
          spring.jpa.hibernate.ddl-auto: ${{ secrets.JPA_AUTO }}
          cloud.aws.region.static: ${{ secrets.AWS_S3_REGION }}
          cloud.aws.s3.bucket: ${{ secrets.AWS_S3_BUCKET }}
          cloud.aws.credentials.access-key: ${{ secrets.AWS_S3_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.AWS_S3_SECRET_KEY }}
          kakao.rest.api.key: ${{ secrets.KAKAO_REST_API_KEY }}
          spring.security.oauth2.client.registration.naver.client-id: ${{ secrets.NAVER_CLIENT_ID }}
          spring.security.oauth2.client.registration.naver.client-secret: ${{ secrets.NAVER_CLIENT_SECRET }}
          seoul.open.api.url: ${{ secrets.SEOUL_OPEN_API }}
          sentry.dsn: ${{ secrets.SENTRY_DNS }}
          server.ssl.key-store-password: ${{ secrets.HTTPS_PW }}


        # (3) Gradle build (Test 제외)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
        with:
          arguments: clean build -x test

      # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (5) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
